{% capture max_width %}
    {% unless section.settings.max_width == blank %}
        {{ section.settings.max_width | prepend: 'max-width: ' | append: 'px;' }}
    {% endunless %}
{% endcapture %}

<article class="">

    <div 
        class="container mx-auto"
        style="{{ max_width }}">

      <div class="google-sheet-sec">
      <table class="google-sheet-output"></table>
      </div>
  </div>
</article>






{% schema %}
{
    "name": "Dealer Portal",
    "settings": [
        {
            "type": "header",
            "content": "General settings"
        },
        {
            "type": "text",
            "id": "max_width",
            "label": "Content max-width (px)",
            "info": "Adjust post content width (in pixels). Leave empty to use the container.",
            "default": "768"
        },
        {
            "type": "select",
            "id": "heading_size",
            "label": "Heading size",
            "default": "display-5",
            "options": [
                { "group": "Display", "value": "display-1", "label": "Display 1" },
                { "group": "Display", "value": "display-2", "label": "Display 2" },
                { "group": "Display", "value": "display-3", "label": "Display 3" },
                { "group": "Display", "value": "display-4", "label": "Display 4" },
                { "group": "Display", "value": "display-5", "label": "Display 5" },
                { "group": "Display",  "value": "display-6", "label": "Display 6" },
                { "group": "Heading", "value": "h1", "label": "H1" },
                { "group": "Heading", "value": "h2", "label": "H2" },
                { "group": "Heading", "value": "h3", "label": "H3" },
                { "group": "Heading", "value": "h4", "label": "H4" },
                { "group": "Heading", "value": "h5", "label": "H5" },
                { "group": "Heading", "value": "h6", "label": "H6" }
            ]
        }
    ]
}
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}
 
const sheetId = '1pC-KtQ2drDxe1mfsmocqn8kHolbtP-guQyrtpFy74e8';
const base = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?`;
const sheetName = 'user-data';
const query = encodeURIComponent('Select *')
const url = `${base}&sheet=${sheetName}&tq=${query}`
 
const data = []
document.addEventListener('DOMContentLoaded', init)
 
const output = document.querySelector('.google-sheet-output')
 
function init() {
    fetch(url)
        .then(res => res.text())
        .then(rep => {
            //Remove additional text and extract only JSON:
            const jsonData = JSON.parse(rep.substring(47).slice(0, -2));
            console.log(rep)
 
            const colz = [];
            const tr = document.createElement('tr');
            //Extract column labels
            jsonData.table.cols.forEach((heading) => {
                if (heading.label) {
                    let column = heading.label;
                    colz.push(column);
                    const th = document.createElement('th');
                    th.innerText = column;
                    tr.appendChild(th);
                }
            })
            output.appendChild(tr);
 
            //extract row data:
            jsonData.table.rows.forEach((rowData) => {
                const row = {};
                colz.forEach((ele, ind) => {
                    row[ele] = (rowData.c[ind] != null) ? rowData.c[ind].v : '';
                })
                data.push(row);
            })
            processRows(data);
        })
}
  
function processRows(json) {
    json.forEach((row) => {
 
        const tr = document.createElement('tr');
        const keys = Object.keys(row);
     
        keys.forEach((key) => {
            const td = document.createElement('td');
            td.textContent = row[key];
            tr.appendChild(td);
        })
        output.appendChild(tr);
    })
}

{% endjavascript %}
